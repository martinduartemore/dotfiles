"""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""
" automatically download vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'ycm-core/YouCompleteMe', {'do': 'python3 install.py --clang-completer'}
call plug#end()

" To fix gutter stutter on YouCompleteMe diagnostics
"set signcolumn=yes
" Alternatively, disable diagnostics
"let g:ycm_enable_diagnostics_signs = 0
"let g:ycm_enable_diagnostics_highlighting = 0
"

" let g:ycm_python_binary_path = 'python'
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1


"""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""

set nocompatible        " remove vi compatibility
set autoread            " reload files when they change out of vim

filetype plugin on      " enable plugin files
filetype indent on      " enable indentation files

set mouse=a             " enable mouse support

"set clipboard=          " make vim use X's clipboards when copying/pasting
set clipboard^=unnamed,unnamedplus


"""""""""""""""""""""""""""""
" VIM User Interface
"""""""""""""""""""""""""""""

set scrolloff=7         "scroll keeping lines above/below
set sidescroll=1        "enable horizontal scroll off
set sidescrolloff=3     "scroll keeping columns left/right

set wildmenu            " turn on the WiLd menu

" Lazy file name tab completion
set wildmode=longest:list,full

set wildignore=         " ignore files in wildmenu
set wildignore+=*.sw?   " swap files
set wildignore+=.git
set wildignore+=*.o,*.obj,*.exe,*.dll
set wildignore+=*~,*.pyc

" Ignore swap files in netrw
" let g:netrw_list_hide='.*\.swp$'
let g:netrw_list_hide='.*\.swp$,.ipynb_checkpoints,__pycache__'

" Set netrw tree mode
let g:netrw_liststyle=3

set ruler               " show the current position
set number              " show line numbers
set ignorecase          " ignore case while searching
set smartcase           " use smartcase for searching
set hlsearch            " highlight search results
set incsearch           " highlight current search results
set showmatch           " show matching brackets
set mat=2               " blink matching brackets (tenths of seconds)


" Backups and temp files
set history=1000        " expand history of commands
set undofile            " enable undo file
set undoreload=1000     " how many undos to load
set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//


"""""""""""""""""""""""""""""
" Colors and Themes
"""""""""""""""""""""""""""""

" Enable syntax highlight
syntax enable           " enable syntax highlighting

"set t_Co=256           " use 256 colors
set t_Co=16             " use 16 colors (ANSI colors)

set background=dark     " background color

" Set colorscheme
" colorscheme base17-default-dark
" colorscheme base16-nord
" colorscheme base16-ocean
" colorscheme base16-oceanicnext
colorscheme base16-onedark


"""""""""""""""""""""""""""""
" Text, Tab and Indent
"""""""""""""""""""""""""""""

set encoding=utf8       " use utf8 encoding
set smarttab            " use smart tabs
set autoindent          " use indent from previous line

set smartindent         " recognize C syntax to add/remove indents

set wrap                " enable word wrapping

set tabstop=4           " tab size in spaces
set softtabstop=4       " tab
set shiftwidth=4        " indent size

set expandtab           " use spaces instead of tabs

set backspace=indent,eol,start

set list                " show special characters
set showbreak=↪\        " break-line indicator


set listchars=          " special characters to show
set listchars+=tab:▸\ ,eol:↵
set listchars+=trail:·,nbsp:·
set listchars+=precedes:‹,extends:›
"set listchars+=space:·

"Invisible character colors
"highlight NonText guifg=#4a4a59
"highlight SpecialKey guifg=#4a4a59

" Enable folding
"set foldmethod=indent  " fold based on indent
set foldmethod=marker   " fold based on markers
set foldnestmax=3       " deepest fold is 3 levels
set nofoldenable        " dont fold by default


"""""""""""""""""""""""""""""
" Status line
"""""""""""""""""""""""""""""

set laststatus=2        " always show the status line

" Status line formatting
set statusline=
set statusline+=%y      " File type
set statusline+=%.40F   " Full path to the file
set statusline+=%m      " Modified flag
set statusline+=%=      " Switch to right side
set statusline+=%l      " Current line
set statusline+=/       " Separator
set statusline+=%L      " Total lines
set statusline+=%4v     " Virtual column number
set statusline+=%4p%%   " Percentage through file


"""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""

" easier navigation through Control-{h,j,k,l}
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l


"""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""

" clean extra spaces (whilst keeping track of current cursor position)
function! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction

" change between relative and absolute numbers
function! ToggleRelativeAbsoluteNumber()
    if !&number && !&relativenumber
        set number
        set norelativenumber
    elseif &number && !&relativenumber
        set nonumber
        set relativenumber
    elseif !&number && &relativenumber
        set number
        set relativenumber
    elseif &number && &relativenumber
        set nonumber
        set norelativenumber
    endif
endfunction

" word frequency function
function! WordFrequency() range
    let all = split(join(getline(a:firstline, a:lastline)), '\A\+')
    let frequencies = {}
    for word in all
        let frequencies[word] = get(frequencies, word, 0) + 1
    endfor
    let lst = []
    for [key,value] in items(frequencies)
        call add(lst, value."\t".key."\n")
    endfor
    call sort(lst)
    echo join(lst)
endfunction


"""""""""""""""""""""""""""""
" Misc
"""""""""""""""""""""""""""""

" reload vimrc everytime it is overwritten
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" resize splits if the window size changes
autocmd VimResized * exe "normal! \<c-w>="

" automatically comment multiple selected lines
let s:comment_map = { 
    \   "c": '\/\/',
    \   "cpp": '\/\/',
    \   "go": '\/\/',
    \   "java": '\/\/',
    \   "javascript": '\/\/',
    \   "typescript": '\/\/',
    \   "lua": '--',
    \   "scala": '\/\/',
    \   "php": '\/\/',
    \   "python": '#',
    \   "ruby": '#',
    \   "rust": '\/\/',
    \   "sh": '#',
    \   "desktop": '#',
    \   "fstab": '#',
    \   "conf": '#',
    \   "profile": '#',
    \   "bashrc": '#',
    \   "bash_profile": '#',
    \   "mail": '>',
    \   "eml": '>',
    \   "bat": 'REM',
    \   "ahk": ';',
    \   "vim": '"',
    \   "tex": '%',
    \   "xdefaults": '!',
    \   "cmake": '#',
    \   "cs": '\/\/',
    \   "yaml": '#',
    \ }


function! ToggleComment()
    if has_key(s:comment_map, &filetype)
        let comment_leader = s:comment_map[&filetype]
        if getline('.') =~ '^\s*$'
            " Skip empty line
            return
        endif
        if getline('.') =~ '^\s*' . comment_leader
            " Uncomment the line
            execute 'silent s/\v\s*\zs' . comment_leader . '\s*\ze//'
        else
            " Comment the line
            execute 'silent s/\v^(\s*)/\1' . comment_leader . ' /'
        endif
    else
        echo "No comment leader found for filetype"
    endif
endfunction

nnoremap <leader><Space> :call ToggleComment()<cr>
vnoremap <leader><Space> :call ToggleComment()<cr>
